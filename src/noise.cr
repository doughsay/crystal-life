module Noise
  # Simple skewing factors for the 3D case
  F3 = 0.333333333
  G3 = 0.166666667

  PERM = [
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180,
    151,160,137,91,90,15,
    131,13,201,95,96,53,194,233,7,225,140,36,103,30,69,142,8,99,37,240,21,10,23,
    190, 6,148,247,120,234,75,0,26,197,62,94,252,219,203,117,35,11,32,57,177,33,
    88,237,149,56,87,174,20,125,136,171,168, 68,175,74,165,71,134,139,48,27,166,
    77,146,158,231,83,111,229,122,60,211,133,230,220,105,92,41,55,46,245,40,244,
    102,143,54, 65,25,63,161, 1,216,80,73,209,76,132,187,208, 89,18,169,200,196,
    135,130,116,188,159,86,164,100,109,198,173,186, 3,64,52,217,226,250,124,123,
    5,202,38,147,118,126,255,82,85,212,207,206,59,227,47,16,58,17,182,189,28,42,
    223,183,170,213,119,248,152, 2,44,154,163, 70,221,153,101,155,167, 43,172,9,
    129,22,39,253, 19,98,108,110,79,113,224,232,178,185, 112,104,218,246,97,228,
    251,34,242,193,238,210,144,12,191,179,162,241, 81,51,145,235,249,14,239,107,
    49,192,214, 31,181,199,106,157,184, 84,204,176,115,121,50,45,127, 4,150,254,
    138,236,205,93,222,114,67,29,24,72,243,141,128,195,78,66,215,61,156,180
  ]

  def self.generate(x : Float64, y : Float64, z : Float64) : Float64
    s : Float64 = (x + y + z) * F3
    xs : Float64 = x + s
    ys : Float64 = y + s
    zs : Float64 = z + s
    i : Int32 = fast_floor(xs)
    j : Int32 = fast_floor(ys)
    k : Int32 = fast_floor(zs)

    t : Float64 = (i + j + k) * G3
    xx0 : Float64 = i - t
    yy0 : Float64 = j - t
    zz0 : Float64 = k - t
    x0 : Float64 = x - xx0
    y0 : Float64 = y - yy0
    z0 : Float64 = z - zz0

    i1, j1, k1, i2, j2, k2 =
      if x0 >= y0
        if y0 >= z0
          [1, 0, 0, 1, 1, 0]
        elsif x0 >= z0
          [1, 0, 0, 1, 0, 1]
        else
          [0, 0, 1, 1, 0, 1]
        end
      else
        if y0 < z0
          [0, 0, 1, 0, 1, 1]
        elsif x0 < z0
          [0, 1, 0, 0, 1, 1]
        else
          [0, 1, 0, 1, 1, 0]
        end
      end

    x1 : Float64 = x0 - i1 + G3
    y1 : Float64 = y0 - j1 + G3
    z1 : Float64 = z0 - k1 + G3
    x2 : Float64 = x0 - i2 + 2.0 * G3
    y2 : Float64 = y0 - j2 + 2.0 * G3
    z2 : Float64 = z0 - k2 + 2.0 * G3
    x3 : Float64 = x0 - 1.0 + 3.0 * G3
    y3 : Float64 = y0 - 1.0 + 3.0 * G3
    z3 : Float64 = z0 - 1.0 + 3.0 * G3

    ii : Int32 = mod(i, 256)
    jj : Int32 = mod(j, 256)
    kk : Int32 = mod(k, 256)

    t0 : Float64 = 0.6 - x0 * x0 - y0 * y0 - z0 * z0
    n0 : Float64 =
      if t0 < 0.0
        0.0
      else
        t0 *= t0
        t0 * t0 * grad(PERM[ii + PERM[jj + PERM[kk]]], x0, y0, z0)
      end

    t1 : Float64 = 0.6 - x1 * x1 - y1 * y1 - z1 * z1
    n1 : Float64 =
      if t1 < 0.0
        0.0
      else
        t1 *= t1
        t1 * t1 * grad(PERM[ii + i1 + PERM[jj + j1 + PERM[kk + k1]]], x1, y1, z1)
      end

    t2 : Float64 = 0.6 - x2 * x2 - y2 * y2 - z2 * z2
    n2 : Float64 =
      if t2 < 0.0
        0.0
      else
        t2 *= t2
        t2 * t2 * grad(PERM[ii + i2 + PERM[jj + j2 + PERM[kk + k2]]], x2, y2, z2)
      end

    t3 : Float64 = 0.6 - x3 * x3 - y3 * y3 - z3 * z3
    n3 : Float64 =
      if t3 < 0.0
        0.0
      else
        t3 *= t3
        t3 * t3 * grad(PERM[ii + 1 + PERM[jj + 1 + PERM[kk + 1]]], x3, y3, z3)
      end

    32.0 * (n0 + n1 + n2 + n3)
  end

  private def self.fast_floor(x)
    x > 0 ? x.to_i : x.to_i - 1
  end

  private def self.mod(x, m)
    a = x % m
    a < 0 ? a + m : a
  end

  private def self.grad(hash, x, y, z)
    h = hash & 15
    u = h < 8 ? x : y
    v = h < 4 ? y : h == 12 || h == 14 ? x : z

    ((h & 1) != 0 ? -u : u) + ((h & 2) != 0 ? -v : v)
  end
end
